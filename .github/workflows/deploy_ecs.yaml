# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "main" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: ap-southeast-1

  # set this to your Amazon ECR repository name
  ECR_REPOSITORY_ML: pii-detection-service-ml
  ECR_REPOSITORY_BACKEND: pii-detection-service-backend
  ECR_REPOSITORY_NGINX: pii-detection-service-nginx

  ECS_SERVICE: pii-detection-service-all-svc-with-nlb
  ECS_CLUSTER: ai212pii
  ECS_TASK_DEFINITION: deploy/aws/pii-detection-service-all-td.json

  # set this to the name of the container in the containerDefinitions section of the task definition
  CONTAINER_NAME_ML: ml
  CONTAINER_NAME_BACKEND: backend
  CONTAINER_NAME_NGINX: nginx

permissions:
  contents: read

jobs:
  build_job:
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_CICD }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_CICD }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Build, tag, and push image to Amazon ECR (Backend)
      id: build-image-backend
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG -f deploy/backend-Dockerfile .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG
        echo "BACKEND_IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG" >> $GITHUB_ENV
    
    - name: Build, tag, and push image to Amazon ECR (NGINX)
      id: build-image-nginx
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_NGINX:$IMAGE_TAG -f deploy/nginx-Dockerfile ./deploy
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_NGINX:$IMAGE_TAG
        echo "NGINX_IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY_NGINX:$IMAGE_TAG" >> $GITHUB_ENV
    
    - name: Build, tag, and push image to Amazon ECR (ML)
      id: build-image-ml
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_ML:$IMAGE_TAG -f deploy/ml-Dockerfile .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_ML:$IMAGE_TAG
        echo "ML_IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY_ML:$IMAGE_TAG" >> $GITHUB_ENV
          
  deploy_job:
    runs-on: ubuntu-latest
    environment: production
    needs: build_job

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_CICD }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_CICD }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Render Amazon ECS task definition (BACKEND)
      id: render-backend-container
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      env:
        IMAGE_TAG: ${{ needs.build.outputs.backend_image }}
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME_BACKEND }}
        image: ${{ env.BACKEND_IMAGE }}
    
    - name: Render Amazon ECS task definition (NGINX)
      id: render-nginx-container
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ steps.render-backend-container.outputs.task-definition }}
        container-name: ${{ env.CONTAINER_NAME_NGINX }}
        image: ${{ env.NGINX_IMAGE }}
    
    - name: Render Amazon ECS task definition (ML)
      id: render-ml-container
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ steps.render-nginx-container.outputs.task-definition }}
        container-name: ${{ env.CONTAINER_NAME_ML }}
        image: ${{ env.ML_IMAGE }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.render-ml-container.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
